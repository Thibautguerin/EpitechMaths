#!/usr/bin/python3

from math import *
import sys
import re
import os

def matrixMultiplicator(vector):
	matrix = [[1, 0, 0, 0, 0],
	[-0.26785714285714285714, 0.53571428571428571429, -0.14285714285714285714, 0.035714285714285714286, -0.017857142857142857143],
	[0.071428571428571428571, -0.14285714285714285714, 0.57142857142857142857, -0.14285714285714285714, 0.071428571428571428571],
	[-0.017857142857142857143, 0.035714285714285714286, -0.14285714285714285714, 0.53571428571428571429, -0.26785714285714285714],
	[0, 0, 0, 0, 1]]
	i = 0
	j = 0
	newVector = []
	nb = 0.0

	while (i != len(vector)):
		while (j != len(matrix[i])):
			nb = nb + vector[j] * matrix[i][j]
			j = j + 1
		newVector.append(nb)
		nb = 0.0
		j = 0
		i = i + 1

	return (newVector)

def vectorCalculation():
	vector = []
	args = [float(sys.argv[1]), float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4]), float(sys.argv[5])]
	i = 0

	vector.append(0.0)
	while (i + 2 != len(args)):
		vector.append((((args[i + 2] - args[i + 1]) / 5) - ((args[i + 1] - args[i]) / 5)) / 10 * 6)
		i = i + 1
	vector.append(0.0)
	vector = matrixMultiplicator(vector)
	return (vector)

def program():
	vector = vectorCalculation()
		
	print("vector result: [", round(vector[0], 1), sep="", end="")
	i = 1
	while (i != len(vector) - 1):
		if (vector[i] < 0 and vector[i] > -0.05):
			print(", ", -round(vector[i], 1), sep="", end="")
		else:
			print(", ", round(vector[i], 1), sep="", end="")
		i = i + 1
	print(", ", round(vector[4], 1), "]", sep="")


	i = 0
	a = 0
	r = 0
	interval = 1

	while (i < int(sys.argv[6])):
		a = 20 * i / (int(sys.argv[6]) - 1)

		if (a >= 0 and a < 5):
			interval = 1
		elif (a >= 5 and a < 10):
			interval = 2
		elif (a >= 10 and a < 15):
			interval = 3
		elif (a >= 15 and a < 20):
			interval = 4

		r = (-vector[interval - 1]) * (a - interval * 5)**3 / 30 + vector[interval] * (a - (interval - 1) * 5)**3 / 30 - (float(sys.argv[interval]) / 5 - (5 * vector[interval - 1]) / 6) * (a - interval * 5) + (float(sys.argv[interval + 1]) / 5 - (5 * vector[interval]) / 6) * (a - (interval - 1) * 5)
		print("abscissa: ", "{0:.1f}".format(a), " cm \tradius: ", "{0:.1f}".format(r), " cm", sep="")
		i = i + 1

def parsing():
	string = (" ".join(sys.argv))

	regexp = r"^((./308reedpipes ([0-9]+([.][0-9]+)? ){5}[0-9]+)|(./308reedpipes -h))$"

	if (re.match(regexp, string) is None):
		exit(84)
	if (float(sys.argv[1]) == 0 or float(sys.argv[2]) == 0 or float(sys.argv[3]) == 0 or float(sys.argv[4]) == 0 or float(sys.argv[5]) == 0 or float(sys.argv[6]) == 0):
		exit(84)
	if (sys.argv[1] == "-h"):
		print("USAGE")
		print("    ./308reedpipes r0 r5 r10 r15 r20 n")
		print("DESCRIPTION")
		print("    r0		radius (in cm) of pipe at the 0cm abscissa")
		print("    r5		radius (in cm) of pipe at the 5cm abscissa")
		print("    r10		radius (in cm) of pipe at the 10cm abscissa")
		print("    r15		radius (in cm) of pipe at the 15cm abscissa")
		print("    r20		radius (in cm) of pipe at the 20cm abscissa")
		print("    n		number of points needed to display the radius")
	else:
		program()

def main():
	parsing()
	exit(0)

main()