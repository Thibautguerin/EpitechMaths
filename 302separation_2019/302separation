#!/usr/bin/python3

from math import *
import sys
import re
import csv
import os

def get_list():
	file = open(sys.argv[1])
	data = file.read().splitlines()
	data = list(csv.reader(data, delimiter=" "))
	i = 0
	people = []
	person = ""

	while (i != len(data)):
		data[i].remove("is")
		data[i].remove("friends")
		data[i][data[i].index("with")] = "<=>"
		i = i + 1

	i = 0
	j = 0
	while (i != len(data)):
		while (j != len(data[i])):
			if (data[i][j] == "<=>"):
				del (data[i][j])
				data[i].insert(0, person)
				if not (person in people):
					people.append(person)
				person = ""
				j = 1
			else:
				if (person == ""):
					person = data[i][j]
				else:
					person = person + " " + data[i][j]
				del (data[i][j])
		if not (person in people):
			people.append(person)
		data[i].append(person)
		person = ""
		j = 0
		i = i + 1
	people.sort()
	return (data, people)

def verif_friend(person, tree):
	i = 0
	j = 0

	while (i != len(tree)):
		while (j != len(tree[i])):
			if (person == tree[i][j]):
				return (False)
			j = j + 1
		j = 0
		i = i + 1
	return (True)

def separation_calculation(x, y, first_matrix, people):
	tree = [[x]]
	tmp = []
	i = 0
	j = 0
	k = 0

	while (True):
		while (k != len(tree[i])):
			while (j != len(first_matrix[tree[i][k]])):
				if (first_matrix[tree[i][k]][j] == 1 and verif_friend(j, tree)):
					tmp.insert(0, j)
				j = j + 1
			j = 0
			k = k + 1
		i = i + 1
		k = 0
		if (len(tmp) == 0):
			return (0)
		tree.append(tmp)
		tmp = []
		if (y in tree[i]):
			break

	if (len(tree) == 1):
		return (0)
	else:
		return (len(tree) - 1)

def secondMatrix(first_matrix, people):
	second_matrix = [[0 for x in range(len(people))] for y in range(len(people))]
	i = 0
	j = 0

	while (i != len(first_matrix)):
		while (j != len(first_matrix[i])):
			if (i != j):
				second_matrix[i][j] = separation_calculation(i, j, first_matrix, people)
			else:
				second_matrix[i][j] = 0
			j = j + 1
		j = 0
		i = i + 1
	return (second_matrix)

def firstMatrix(data, people):
	i = 0
	j = 0
	k = 0
	first_matrix = [[0 for x in range(len(people))] for y in range(len(people))]

	while (i != len(people)):
		while(j != len(people)):
			while (k != len(data)):
				if (people[i] == people[j]):
					break
				if (people[i] in data[k] and people[j] in data[k]):
					first_matrix[i][j] = 1
					break
				k = k + 1
			k = 0
			j = j + 1
		j = 0
		i = i + 1
	return (first_matrix)

def program():
	data, people = get_list()
	i = 0
	first_matrix = firstMatrix(data, people)
	second_matrix = secondMatrix(first_matrix, people)

	if (len(sys.argv) == 3):
		while (i != len(people)):
			print(people[i])
			i = i + 1
		print()
		i = 0
		j = 0
		while (i != len(first_matrix)):
			while (j != len(first_matrix[i])):
				if (j == 0):
					print(first_matrix[i][j], sep="", end="")
				else:
					print(" ", first_matrix[i][j], sep="", end="")
				j = j + 1
			print()
			j = 0
			i = i + 1
		print()

		i = 0
		j = 0
		while (i != len(second_matrix)):
			while (j != len(second_matrix[i])):
				if (j == 0):
					if (second_matrix[i][j] <= int(sys.argv[2])):
						print(second_matrix[i][j], sep="", end="")
					else:
						print(0, sep="", end="")
				else:
					if (second_matrix[i][j] <= int(sys.argv[2])):
						print(" ", second_matrix[i][j], sep="", end="")
					else:
						print(" 0", sep="", end="")
				j = j + 1
			print()
			j = 0
			i = i + 1
	else:
		x = 0
		while (x != len(people)):
			if (people[x] == sys.argv[2]):
				break
			x = x + 1
		y = 0
		while (y != len(people)):
			if (people[y] == sys.argv[3]):
				break
			y = y + 1
		if (x == len(people) or y == len(people)):
			print("Degree of separation between ", sys.argv[2], " and ", sys.argv[3], ": ", -1, sep="")
		else:
			print("Degree of separation between ", sys.argv[2], " and ", sys.argv[3], ": ", second_matrix[x][y], sep="")

def parsing():
	string = (" ".join(sys.argv))

	regexp = r"^((./302separation [a-zA-Z0-9/._-]+ (([0-9]+)|([a-zA-Z ]+ [a-zA-Z ]+)))|(./302separation -h))$"

	if (re.match(regexp, string) is None):
		exit(84)
	elif not (os.path.exists(sys.argv[1])):
		exit(84)
	if (sys.argv[1] == "-h"):
		print("USAGE")
		print("    ./302separation file [n | p1 p2]")
		print("DESCRIPTION")
		print("    file    file that contains the list of Facebook connections")
		print("    n       maximum length of the paths")
		print("    pi      name of someone in the file")
	else:
		program()

def main():
	parsing()
	exit(0)

main()