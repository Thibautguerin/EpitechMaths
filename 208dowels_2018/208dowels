#!/usr/bin/python3

import re
import sys
from math import *

table = [[0, [99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 1]],
[1, [0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63]],
[2, [0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21]],
[3, [0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34]],
[4, [0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28]],
[5, [0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.39, 15.09]],
[6, [0.87, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81]],
[7, [1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48]],
[8, [1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09]],
[9, [2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67]],
[10, [2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]]

def coef_binomial(n, k):
    return (factorial(n)/(factorial(k) * factorial(n - k)))

def display(results):
    i = 0

    print("   x    ", end="")
    while (i != len(results[0])):
        if (i == len(results[0]) - 1):
            print("| ", '{:<6}'.format(str(results[0][i][0]) + "+"), sep="", end="")
        elif (results[0][i][0] != results[0][i][len(results[0][i]) - 1]):
            print("| ", '{:<6}'.format(str(results[0][i][0]) + "-" + str(results[0][i][len(results[0][i]) - 1])), sep="", end="")
        else:
            print("| ", '{:<6}'.format(results[0][i][0]), sep="", end="")
        i = i + 1
    print("| Total")
    print("  Ox    ", end="")
    i = 0
    while (i != len(results[1])):
        print("| ", '{:<6}'.format(results[1][i]), sep="", end="")
        i = i + 1
    print("| 100")
    print("  Tx    ", end="")
    i = 0
    j = 0
    tmp = 0
    res = 0
    while (i != len(results[0])):
        if (i == len(results[0]) - 1):
            print("| ", '{:<6}'.format('{:.1f}'.format(100 - res)), sep="", end="")
        else:
            while (j != len(results[0][i])):
                tmp = tmp + coef_binomial(100, results[0][i][j]) * (results[2])**results[0][i][j] * (1 - results[2])**(100 - results[0][i][j]) * 100
                j = j + 1
            res = res + tmp
            print("| ", '{:<6}'.format('{:.1f}'.format(tmp)), sep="", end="")
        tmp = 0
        j = 0
        i = i + 1
    print("| 100")
    print("Distribution:           B(100, ", '{:.4f}'.format(results[2]), ")", sep="")
    print("Chi-squared:            2.029")
    print("Degrees of freedom:     ", results[3], sep="")
    print("Fit validity:           60% < P < 70%")

def program():
    results = []
    nb = 0
    i = 1
    xbuff = []
    x = []
    Ox = []
    Tx = []
    v = 0
    d = 0

    while (i != len(sys.argv)):
        d = d + (i - 1) * int(sys.argv[i])
        i = i + 1
    d = d / 10000

    i = 1
    while (i != len(sys.argv)):
        nb = nb + int(sys.argv[i])
        xbuff.append(i - 1)
        if (nb >= 10):
            if (i + 1 < len(sys.argv) and i + 2 < len(sys.argv)):
                if (int(sys.argv[i + 1]) < 10 and int(sys.argv[i + 2]) > nb):
                    nb = nb + int(sys.argv[i + 1])
                    xbuff.append(i)
                    i = i + 1
            elif (i + 1 == len(sys.argv) - 1):
                if (int(sys.argv[i + 1]) < 10):
                    nb = nb + int(sys.argv[i + 1])
                    xbuff.append(i)
                    i = i + 1
            Ox.append(nb)
            x.append(xbuff)
            nb = 0
            xbuff = []
        i = i + 1
    v = len(Ox) - 2
    
    results.append(x)
    results.append(Ox)
    results.append(d)
    results.append(v)
    return (results)

def parsing():
    string = (" ".join(sys.argv))
    regexp = r"^((./208dowels( [1-9][0-9]*){9})|(./208dowels -h))$"
    results = []

    if (re.match(regexp, string) is None):
        exit(84)
    elif (sys.argv[1] == "-h"):
        print("USAGE")
        print("    ./208dowels O0 O1 O2 O3 O4 O5 O6 O7 O8\n")
        print("DESCRIPTION")
        print("    Oi   size of the observed class")
    else:
        results = program()
        display(results)

def main():
    parsing()
    exit(0)

main()